[{"id":"c2477478.64435","type":"tab","label":"5_Lyon_Heat_Wave_UIaaS"},{"id":"7f25903.9dafbf","type":"omiNodeV9","z":"c2477478.64435","name":"Read O-MI Node Lyon Heat Wave Mitigation","path_InfoItem":"https://biotope-omi.alpha.grandlyon.com/Objects/Organization:Metropole-de-Lyon:v1-0-0","token":"","operations":"Read","ttl":"40","interval":"","callback":"","newest":"","oldest":"","begin":"","end":"","value":"","reqID":"","metadata":true,"readTypes":"read1time","x":619.8833312988281,"y":445.8833312988281,"wires":[["cf6a0295.d9a8b8"]]},{"id":"580c3cee.707a14","type":"debug","z":"c2477478.64435","name":"OutputOMINodeLyon","active":true,"console":"false","complete":"payload","x":1380.88330078125,"y":473.88330078125,"wires":[]},{"id":"cf6a0295.d9a8b8","type":"xml","z":"c2477478.64435","name":"Lyon O-DF Structure to JSON","attr":"","chr":"","x":618.88330078125,"y":523.8833312988281,"wires":[["dd8b250e.1c203","e4fecb9a.e3da38","2adec3d9.178284","48ee2f87.aeaca"]]},{"id":"6165d8.baca7a28","type":"inject","z":"c2477478.64435","name":"Execute UIaaS Request Morning","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 08 * * *","once":false,"x":288,"y":358.8833312988281,"wires":[["7f25903.9dafbf"]]},{"id":"e4fecb9a.e3da38","type":"python3-function","z":"c2477478.64435","name":"Extract Response O-MI Node Lyon HW","func":"import time\nfrom modules.extract import code\nfrom modules.extract import working\n\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\nlyonHeatWaveInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0]\norganizationID = lyonHeatWaveInfoItem[\"id\"][0]\n \nnode.error (working(response))\nmsg[\"payload\"] = code(lyonHeatWaveInfoItem)\nreturn msg","outputs":1,"x":1047.36669921875,"y":428.88330078125,"wires":[["580c3cee.707a14","84aa2a8.f3a1fd8","29fc8f49.2975d"]]},{"id":"eda1d5d6.083d2","type":"inject","z":"c2477478.64435","name":"Execute UIaaS Request Night","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"00 19 * * *","once":false,"x":254,"y":526,"wires":[["7f25903.9dafbf"]]},{"id":"dd8b250e.1c203","type":"debug","z":"c2477478.64435","name":"","active":true,"console":"false","complete":"false","x":973,"y":312,"wires":[]},{"id":"84aa2a8.f3a1fd8","type":"worldmap","z":"c2477478.64435","name":"","lat":"","lon":"","zoom":"","layer":"OSM","cluster":"","maxage":"","usermenu":"show","layers":"show","panit":"true","path":"","x":1323,"y":614,"wires":[]},{"id":"9443a34c.4a20c","type":"python3-function","z":"c2477478.64435","name":"Store on MongoDB","func":"# from modules.library import clean_netatmo_data2\nimport pymongo\nfrom pymongo import MongoClient\nfrom modules.library import insert_mongo\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'myDB'\ncollection = 'biotope'\nres = insert_mongo(db, collection, data, host)\n","outputs":1,"x":1309.9166259765625,"y":364.4444580078125,"wires":[[]]},{"id":"2e0f033a.17dcb4","type":"python3-function","z":"c2477478.64435","name":"ReadFromMongo","func":"import pymongo\nfrom pymongo import MongoClient\nfrom modules.library import read_mongo\nimport pandas as pd\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'PEPE'\ncollection = 'products'\nquery={'qty':50}\nres = read_mongo(db, collection, query , host)\n\nabc = res.to_json(orient='records')\ncol = res.to_json(orient='columns')\n\nmsg['payload'] = abc\nreturn msg","outputs":1,"x":522.5,"y":811.25,"wires":[["d872db58.6be688"]]},{"id":"d2d14dab.d81858","type":"python3-function","z":"c2477478.64435","name":"Warning Preprocessor","func":"from modules.eee import heatwave\n\nTbefyest=msg[\"payload\"][0]['qty']\nTyest=msg[\"payload\"][0]['qty']\nTtoday=msg[\"payload\"][1]['qty']\nmsg[\"payload\"] = heatwave(Tbefyest,Tyest,Ttoday)\nreturn msg","outputs":1,"x":941.5,"y":708,"wires":[["8137d1b2.1ebdd8","4e764a95.4fa444"]]},{"id":"8137d1b2.1ebdd8","type":"ui_text","z":"c2477478.64435","group":"e286f4da.091458","order":1,"width":0,"height":0,"name":"HeatWAveLog","label":"Heat Wave Situation","format":"{{msg.payload}}","layout":"row-left","x":1186.5,"y":733,"wires":[]},{"id":"d872db58.6be688","type":"json","z":"c2477478.64435","name":"","x":780.5,"y":903,"wires":[["4e764a95.4fa444","d2d14dab.d81858"]]},{"id":"4e764a95.4fa444","type":"debug","z":"c2477478.64435","name":"","active":true,"console":"false","complete":"payload","x":992,"y":878,"wires":[]},{"id":"2adec3d9.178284","type":"python3-function","z":"c2477478.64435","name":"Extract Response O-MI Node Lyon 2","func":"import time\n#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nnodeName = \"Lyon\"\nlstForGeo = []\nparsedGeoAndCorrespondingTemp = []\nlstForPOI = []\ntempList = []\n\nif response == \"200\":\n node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n \n #getting the array of Objects with the Parking Facilities Data from Lyon\n lyonHeatWaveInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0]\n organizationID = lyonHeatWaveInfoItem[\"id\"][0]\n \n for items in lyonHeatWaveInfoItem[\"Object\"]:\n    tempid = items[\"id\"][0]\n    if tempid == \"OrganizationalUnit:DINSI\":\n        templist = items[\"Object\"]\n        for objs in templist:\n            tempid2 = objs[\"id\"][0]\n            if tempid2 == \"Deployment:Sensing-Labs-IP68-Outdoor-Temperature-Sensor:II\":\n                lstForPOI = objs[\"Object\"]\n \n #getting the Geo Coordinates ....\n for geoloc in lstForPOI:\n    infoItem = geoloc[\"InfoItem\"]\n    ids = geoloc[\"id\"][0]\n    date = time.strftime(\"%d/%m/%Y\")\n    dayPart = time.strftime(\"%X\")\n    if dayPart[:2] == \"19\":\n        dayPart = \"night\"\n    elif dayPart[:2] == \"08\":\n        dayPart = \"morning\"\n        \n    if ids[:6] == \"Sensor\": \n        objectItem = geoloc[\"Object\"]\n        longitude = 0\n        latitude = 0\n        resultTemp = 0\n    \n        #geo Coordinates get\n        for item in infoItem:\n            if item[\"$\"][\"name\"] == \"geo:long\":\n                longitude = item[\"value\"][0][\"_\"]\n            elif item[\"$\"][\"name\"] == \"geo:lat\":\n                latitude = item[\"value\"][0][\"_\"]\n     \n        #tempResult get\n        for items in objectItem:\n            if items[\"$\"][\"type\"] == \"sosa:Observation\":\n                resultTemp = items[\"InfoItem\"][0][\"value\"][0][\"_\"]\n        lstForGeo.append({\"geo\":[longitude, latitude], \"temp\":resultTemp, \"date\":date, \"time\":dayPart})\n        parsedGeoAndCorrespondingTemp.append({\"lon\":float(longitude), \"lat\":float(latitude), \"temprature\":resultTemp, \"date\":date, \"name\":ids, \"layer\":\"heatWave\"})\nelse:\n node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingTemp\nreturn msg","outputs":1,"x":1018,"y":533,"wires":[["84aa2a8.f3a1fd8","580c3cee.707a14"]]},{"id":"48ee2f87.aeaca","type":"python3-function","z":"c2477478.64435","name":"Extract Response O-MI Node Lyon 3","func":"import time\n#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\nresponse = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"return\"][0][\"$\"][\"returnCode\"];\n\nnodeName = \"Lyon\"\nlstForGeo = []\nparsedGeoAndCorrespondingTemp = []\nlstForPOI = []\ntempList = []\n\nif response == \"200\":\n node.log(\"Extract Response O-MI Node: Success in reading O-MI Node Contents\")\n \n #getting the array of Objects with the Parking Facilities Data from Lyon\n lyonHeatWaveInfoItem = msg[\"payload\"][\"omiEnvelope\"][\"response\"][0][\"result\"][0][\"msg\"][0][\"Objects\"][0][\"Object\"][0]\n organizationID = lyonHeatWaveInfoItem[\"id\"][0]\n \n for items in lyonHeatWaveInfoItem[\"Object\"]:\n    tempid = items[\"id\"][0]\n    if tempid == \"OrganizationalUnit:DE\":\n        templist = items[\"Object\"]\n        for objs in templist:\n            tempid2 = objs[\"id\"][0]\n            if tempid2 == \"Deployment:Stella-Rain-gauge:872dd3ac-2859-11e8-9447-10604b7fb2e7\":\n                lstForPOI = objs[\"Object\"]\n \n #getting the Geo Coordinates ....\n for geoloc in lstForPOI:\n    infoItem = geoloc[\"InfoItem\"]\n    ids = geoloc[\"id\"][0]\n    date = time.strftime(\"%d/%m/%Y\")\n    dayPart = time.strftime(\"%X\")\n    if dayPart[:2] == \"19\":\n        dayPart = \"night\"\n    elif dayPart[:2] == \"08\":\n        dayPart = \"morning\"\n        \n    if ids[:6] == \"Sensor\": \n        objectItem = geoloc[\"Object\"]\n        longitude = 0\n        latitude = 0\n        resultTemp = 0\n    \n        #geo Coordinates get\n        for item in infoItem:\n            if item[\"$\"][\"name\"] == \"geo:long\":\n                longitude = item[\"value\"][0][\"_\"]\n            elif item[\"$\"][\"name\"] == \"geo:lat\":\n                latitude = item[\"value\"][0][\"_\"]\n     \n        #tempResult get\n        for items in objectItem:\n            if items[\"$\"][\"type\"] == \"sosa:Observation\":\n                resultTemp = items[\"InfoItem\"][0][\"value\"][0][\"_\"]\n        lstForGeo.append({\"geo\":[longitude, latitude], \"temp\":resultTemp, \"date\":date, \"time\":dayPart})\n        parsedGeoAndCorrespondingTemp.append({\"lon\":float(longitude), \"lat\":float(latitude), \"raingauge\":resultTemp, \"date\":date, \"name\":ids, \"layer\":\"heatWave\"})\nelse:\n node.error(\"Extract Response O-MI Node: Failure in reading O-MI Node Contents\")\n\nmsg[\"payload\"] = parsedGeoAndCorrespondingTemp\nreturn msg","outputs":1,"x":1011,"y":593,"wires":[["580c3cee.707a14","84aa2a8.f3a1fd8"]]},{"id":"3199a410.017304","type":"inject","z":"c2477478.64435","name":"","topic":"","payload":"<Products>     <Product>         <id>123</id>         <sku>ABJ-252</sku>         <name>Nike Track Jacket</name>         <brand>Nike</brand>         <url>http://www.mystore.com/ABJ252.html</url>         <addtocart_url>http://www.mystore.com/addtocart?id=123</addtocart_url>         <image_url>http://www.mystore.com/images/ABJ252.jpg</image_url>         <thumbnail_url>http://www.mystore.com/thumbnails/ABJ252.jpg</thumbnail_url>         <description>This is a really great jacket. It's available in several colors and will keep you warm.</description>         <price>49.99</price>         <msrp>54.99</msrp>         <categories>             <category>Apparel</category>             <category>Apparel/Men's</category>             <category>Apparel/Men's/Jackets</category>         </categories>         <colors>             <color>Red</color>             <color>Blue</color>             <color>Black</color>         </colors>         <display_colors>             <display_color>#D80626</display_color>             <display_color>#2B98E5</display_color>             <display_color>#121212</display_color>         </display_colors>         <rating>5</rating>         <num_ratings>4</num_ratings>         <sizes>             <size>Small</size>             <size>Medium</size>             <size>Large</size>         </sizes>     </Product>     <Product>         <id>162</id>         <sku>ADI-42</sku>         <name>Adidas Soccer Shirt</name>         <brand>Adidas</brand>         <url>http://www.mystore.com/ADI42.html</url>         <addtocart_url>http://www.mystore.com/addtocart?id=162</addtocart_url>         <image_url>http://www.mystore.com/images/ADI42.jpg</image_url>         <thumbnail_url>http://www.mystore.com/thumbnails/ADI42.jpg</thumbnail_url>         <description>This is a white t-shirt with a soccer ball on it.</description>         <price>13.99</price>         <msrp>18.99</msrp>         <categories>             <category>Apparel</category>             <category>Apparel/Men's</category>             <category>Apparel/Men's/Shirts</category>         </categories>         <colors>             <color>White</color>         </colors>         <display_colors>             <display_color>#FFFFFF</display_color>         </display_colors>         <rating>3.5</rating>         <num_ratings>2</num_ratings>         <sizes>             <size>Large</size>             <size>X-Large</size>         </sizes>     </Product> </Products>","payloadType":"str","repeat":"","crontab":"","once":false,"x":279.44444444444446,"y":172.77777777777777,"wires":[["29169cf5.3b9c54"]]},{"id":"29169cf5.3b9c54","type":"xml","z":"c2477478.64435","name":"example to JSON","attr":"","chr":"","x":521.111083984375,"y":200.00001525878906,"wires":[["447a4f59.448be8","f3dc0d47.f6993"]]},{"id":"f3dc0d47.f6993","type":"debug","z":"c2477478.64435","name":"","active":true,"console":"false","complete":"false","x":1101.1111450195312,"y":197.77781677246094,"wires":[]},{"id":"447a4f59.448be8","type":"python3-function","z":"c2477478.64435","name":"tesst","func":"import time\n#taking response value \n#Note in response first is longitude --> 0 and latitude -->1\n\nmytest = []\ntalla = []\nlyonHeatWaveInfoItem = msg[\"payload\"][\"Products\"]\n \nfor items in lyonHeatWaveInfoItem[\"Product\"]:\n    name = items[\"name\"][0]\n    brand = items[\"brand\"][0]\n    price = items[\"price\"][0]\n    rating = items[\"rating\"][0]\n    colors = items[\"colors\"][0][\"color\"][0]\n    sizes = items[\"sizes\"][0]\n    for group in sizes[\"size\"]:\n        talla = group\n        mytest.append({\"item\":name, \"type\":brand, \"qty\":price,\"rating\":rating,\n                       \"color\":colors, \"size\":talla})\n\nmsg[\"payload\"] = mytest\nreturn msg","outputs":1,"x":704.4444580078125,"y":147.7777862548828,"wires":[["f3dc0d47.f6993","57ad2cf7.04301c"]]},{"id":"57a168e3.aba728","type":"inject","z":"c2477478.64435","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":305.625,"y":859.375,"wires":[["2e0f033a.17dcb4"]]},{"id":"29fc8f49.2975d","type":"python3-function","z":"c2477478.64435","name":"ReadFromMongo","func":"import pymongo\nfrom pymongo import MongoClient\nfrom modules.library import read_mongo\nimport pandas as pd\n\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'myDB'\ncollection = 'biotope'\nquery = {\"date\":'29/10/2018'}\n\nres = read_mongo(db, collection, query , host)\n\nabc = res.to_json(orient='records')\ncol = res.to_json(orient='columns')\n\nmsg['payload'] = col\nreturn msg","outputs":1,"x":1376.25,"y":421.25,"wires":[["bb9e44ff.54788"]]},{"id":"bb9e44ff.54788","type":"json","z":"c2477478.64435","name":"","x":1605,"y":391.25,"wires":[["5e5b4466.46bb54","42b1108c.6b0f1"]]},{"id":"5e5b4466.46bb54","type":"debug","z":"c2477478.64435","name":"","active":true,"console":"false","complete":"payload","x":1816.5,"y":366.25,"wires":[]},{"id":"57ad2cf7.04301c","type":"python3-function","z":"c2477478.64435","name":"Store on MongoDB","func":"# from modules.library import clean_netatmo_data2\nimport pymongo\nfrom pymongo import MongoClient\nfrom modules.library import insert_mongo\n\ndata = msg['payload']\nhost = 'mongodb'\ndb = 'PEPE'\ncollection = 'products'\nres = insert_mongo(db, collection, data, host)\n","outputs":1,"x":913.75,"y":113.75,"wires":[[]]},{"id":"42b1108c.6b0f1","type":"python3-function","z":"c2477478.64435","name":"Warning Preprocessor","func":"from modules.eee import heatwave\n\nTbefyest=msg['payload']['temperature']['0']\nTyest=msg['payload']['temperature']['1']\nTtoday=msg['payload']['temperature']['2']\nmsg[\"payload\"] = heatwave(Tbefyest,Tyest,Ttoday)\nreturn msg","outputs":1,"x":1790,"y":242.5,"wires":[["5e5b4466.46bb54"]]},{"id":"963bd807.2b509","type":"python3-function","z":"c2477478.64435","name":"","func":"from datetime import datetime, timedelta\nimport time\n\nyes = time.strftime(\"%d/%m/%Y\")\ntoday = datetime.now()\nDD = timedelta(days=2)\nDd = timedelta(days=1)\n\nearlier = today - DD\nfuture = today + Dd\n\nearlier_str = earlier.strftime(\"%Y%m%d\")\nfuture_str = future.strftime(\"%Y%m%d\")\n\nyear = earlier_str[:4]\nmonth = earlier_str[4:6]\nday = earlier_str[-2:]\nantdate= day + '/' + month + '/' + year \n\nyear = future_str[:4]\nmonth = future_str[4:6]\nday = future_str[-2:]\npostdate= day + '/' + month + '/' + year \n\n\nmsg['payload']=antdate + postdate\nreturn msg","outputs":1,"x":1445.625,"y":1040.625,"wires":[["c4e00692.78ec38"]]},{"id":"c4e00692.78ec38","type":"debug","z":"c2477478.64435","name":"","active":true,"console":"false","complete":"payload","x":1625.625,"y":1026.25,"wires":[]},{"id":"b521b9b1.61e98","type":"inject","z":"c2477478.64435","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"x":1221.875,"y":1013.125,"wires":[["963bd807.2b509"]]},{"id":"e286f4da.091458","type":"ui_group","z":"","name":"Marked Temperature Sensors in Lyonw","tab":"5bd4cca7.e80d9c","disp":true,"width":"40","collapse":false},{"id":"5bd4cca7.e80d9c","type":"ui_tab","z":"","name":"Lyon Heat Wave Mitigation","icon":"dashboard"}]
